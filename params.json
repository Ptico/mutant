{"name":"Mutant","tagline":"Mutation tests for ruby","body":"mutant\r\n======\r\n\r\n[![Build Status](https://secure.travis-ci.org/mbj/mutant.png?branch=master)](http://travis-ci.org/mbj/mutant)\r\n[![Dependency Status](https://gemnasium.com/mbj/mutant.png)](https://gemnasium.com/mbj/mutant)\r\n[![Code Climate](https://codeclimate.com/github/mbj/mutant.png)](https://codeclimate.com/github/mbj/mutant)\r\n\r\nMutant is a mutation testing tool for ruby.\r\n\r\nThe idea is that if code can be changed and your tests do not notice, either that code isn't being covered\r\nor it does not have a speced side effect.\r\n\r\nA more readable introduction can be found under: http://solnic.eu/2013/01/23/mutation-testing-with-mutant.html\r\n\r\nMutant supports MRI and RBX 1.9 and 2.0, while support for jruby is planned. It should also work under\r\nany ruby engine that supports POSIX-fork(2) semantics.\r\n\r\nOnly rspec2 is supported currently. This is subject to change.\r\n\r\nIt is easy to write a mutation killer/strategy for other test/spec frameworks than rspec2.\r\n\r\nProjects using Mutant\r\n---------------------\r\n\r\nThe following projects adopted mutant, and aim 100% mutation coverage:\r\n\r\n* [axiom](https://github.com/dkubb/axiom)\r\n* [axiom-types](https://github.com/dkubb/axiom-types)\r\n* [rom-mapper](https://github.com/rom-rb/rom-mapper)\r\n* [rom-session](https://github.com/rom-rb/rom-session)\r\n* [event_bus](https://github.com/kevinrutherford/event_bus)\r\n* [virtus](https://github.com/solnic/virtus)\r\n* [quacky](https://github.com/benmoss/quacky)\r\n* [substation](https://github.com/snusnu/substation)\r\n* [large_binomials](https://github.com/filipvanlaenen/large_binomials)\r\n* various small/minor stuff under https://github.com/mbj\r\n\r\nFeel free to ping me to add your project to the list!\r\n\r\nInstallation\r\n------------\r\n\r\nInstall the gem `mutant` via your preferred method.\r\n\r\nThe 0.2 series is stable but has outdated dependencies. The 0.3 series is in beta phase currently.\r\n\r\n```ruby\r\ngem install mutant --pre\r\n```\r\n\r\nMutations\r\n---------\r\n\r\nMutant supports a very wide range of mutation operators. Listing them all in detail would blow this document up.\r\n\r\nIt is planned to parse a list of mutation operators from the source. In the meantime please refer to the\r\n[code](https://github.com/mbj/mutant/tree/master/lib/mutant/mutator/node) each subclass of `Mutant::Mutator::Node`\r\nemits around 3-6 mutations.\r\n\r\nCurrently mutant covers the majority of ruby's complex nodes that often occur in method bodies.\r\n\r\nSome stats from the [axiom](https://github.com/dkubb/axiom) library:\r\n\r\n```\r\nSubjects:  424       # Amount of subjects being mutated (currently only methods)\r\nMutations: 6760      # Amount of mutations mutant generated (~13 mutations per method)\r\nKills:     6664      # Amount of successfully killed mutations\r\nRuntime:   5123.13s  # Total runtime\r\nKilltime:  5092.63s  # Time spend killing mutations\r\nOverhead:  0.60%\r\nCoverage:  98.58%    # Coverage score\r\nAlive:     96        # Amount of alive mutations.\r\n```\r\n\r\n\r\nNodes still missing a dedicated mutator are handled via the\r\n[Generic](https://github.com/mbj/mutant/blob/master/lib/mutant/mutator/node/generic.rb) mutator.\r\nThe goal is to remove this mutator and have dedicated mutator for every type of node and removing\r\nthe Generic handler altogether.\r\n\r\nExamples\r\n--------\r\n\r\n```\r\ncd virtus\r\n# Run mutant on virtus namespace\r\nmutant --include lib --require virtus --rspec ::Virtus*\r\n# Run mutant on specific virtus class\r\nmutant --include lib --require virtus --rspec ::Virtus::Attribute\r\n# Run mutant on specific virtus class method\r\nmutant --include lib --require virtus --rspec ::Virtus::Attribute.build\r\n# Run mutant on specific virtus instance method\r\nmutant --include lib --require virtus --rspec ::Virtus::Attribute#type\r\n```\r\n\r\nPresentations:\r\n--------------\r\n\r\nThere are some presentations about mutant in the wild:\r\n\r\n* [Eurocamp-2013](http://2013.eurucamp.org/) / FrOSCon-2013 http://slid.es/markusschirp/mutation-testing\r\n* [Cologne.rb](http://www.colognerb.de/topics/mutation-testing-mit-mutant) https://github.com/DonSchado/colognerb-on-mutant/blob/master/mutation_testing_slides.pdf\r\n\r\nSubjects:\r\n---------\r\n\r\nMutant currently mutates code in instance and singleton methods. It is planned to support mutation\r\nof constant definitions and domain specific languages, DSL probably as plugins.\r\n\r\nTest-Selection\r\n--------------\r\n\r\nMutation testing is slow. The key to making it fast is selecting the correct set of tests to run.\r\nMutant currently supports the following built-in strategy for selecting tests/specs:\r\n\r\nMutant uses the \"longest rspec example group descriptions prefix match\" to select the tests to run.\r\n\r\nExample for a subject like `Foo::Bar#baz` it will run all example groups with description prefixes in\r\n`Foo::Bar#baz`, `Foo::Bar` and `Foo`. The order is important, so if mutant finds example groups in the\r\ncurrent prefix level, these example groups *must* kill the mutation.\r\n\r\nThis test selection strategy is compatible with the old `--rspec-dm2` and `--rspec-unit` strategy.\r\nThe old flags where removed.  It allows to define very fine grained specs, or coarse grained - as you like.\r\n\r\nSupport\r\n-------\r\n\r\nI'm very happy to receive/answer feedback/questions and critism.\r\n\r\nYour options:\r\n\r\n* GitHub Issues https://github.com/mbj/mutant/issues\r\n* Ping me on https://twitter.com/_m_b_j_\r\n* #mutant channel on freenode, I hang around on CET daytimes. (nick mbj)\r\n  You'll also find others [ROM](https://github.com/rom-rb) team members here that can answer questions.\r\n\r\nCredits\r\n-------\r\n\r\n* [Markus Schirp (mbj)](https://github.com/mbj)\r\n* A [gist](https://gist.github.com/1065789) from [dkubb](https://github.com/dkubb) showing ideas.\r\n* Older abandoned [mutant](https://github.com/txus/mutant). For motivating me doing this one.\r\n* [heckle](https://github.com/seattlerb/heckle). For getting me into mutation testing.\r\n\r\nContributing\r\n-------------\r\n\r\n* Fork the project.\r\n* Make your feature addition or bug fix.\r\n* Add tests for it. This is important so I don't break it in a\r\n  future version unintentionally.\r\n* Commit, do not mess with Rakefile or version\r\n  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)\r\n* Send me a pull request. Bonus points for topic branches.\r\n\r\nLicense\r\n-------\r\n\r\nSee LICENSE file.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}